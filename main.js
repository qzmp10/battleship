(()=>{"use strict";var e,t,r,n,a={426:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),a=r.n(n),o=r(645),i=r.n(o)()(a());i.push([e.id,"body {\n    display: flex;\n    gap: 6rem;\n}\n\n.player-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap: .5rem;\n    justify-items: center;\n}\n\n.cpu-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap:.5rem;\n    justify-items: center;\n}\n\n.area {\n    width: 3rem;\n    height: 3rem;\n    background-color: green;\n}\n\n.hit {\n    background-color: red;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,UAAU;IACV,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,SAAS;IACT,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["body {\n    display: flex;\n    gap: 6rem;\n}\n\n.player-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap: .5rem;\n    justify-items: center;\n}\n\n.cpu-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap:.5rem;\n    justify-items: center;\n}\n\n.area {\n    width: 3rem;\n    height: 3rem;\n    background-color: green;\n}\n\n.hit {\n    background-color: red;\n}\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},654:(e,t,r)=>{var n=r(379),a=r.n(n),o=r(795),i=r.n(o),s=r(569),c=r.n(s),l=r(565),u=r.n(l),p=r(216),d=r.n(p),h=r(589),f=r.n(h),m=r(426),y={};y.styleTagTransform=f(),y.setAttributes=u(),y.insert=c().bind(null,"head"),y.domAPI=i(),y.insertStyleElement=d(),a()(m.Z,y),m.Z&&m.Z.locals&&m.Z.locals},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=n.base?c[0]+n.base:c[0],u=o[l]||0,p="".concat(l," ").concat(u);o[l]=u+1;var d=r(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var f=a(h,n);n.byIndex=s,t.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=r(o[i]);t[s].references--}for(var c=n(e,a),l=0;l<o.length;l++){var u=r(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},498:(e,t,r)=>{r.d(t,{V:()=>a});var n=r(643);class a{constructor(){this.gameboard=this.createBoard(),this.carrier=new n.lO(5),this.battleship=new n.lO(4),this.cruiser=new n.lO(3),this.submarine=new n.lO(3),this.destroyer=new n.lO(2)}createBoard(){let e=[];for(let t=0;t<100;t++)e.push({ship:!1,state:"intact",position:t});return e}placeShip(e,t,r,n){let a=r;if(!(t<2||t>5)){if("horizontal"==e){if(r>=10)for(;10<a;)a%10==0||(a%=10);if(t>10-a)return;for(let e=0;e<t;e++)0==e?(this.gameboard[r].ship=!0,this.gameboard[r].type=n):(this.gameboard[r+e].ship=!0,this.gameboard[r+e].type=n)}if("vertical"==e){if(10*t>=100-r)return;for(let e=0;e<t;e++)this.gameboard[r+10*e].ship=!0,this.gameboard[r+10*e].type=n}}}receiveAttack(e){let t=[];if(this.gameboard[e].state="hit",1==this.gameboard[e].ship){let r=this.gameboard[e].type,n=this.gameboard.filter((e=>e.type==`${r}`));for(const e of n)"hit"==e.state&&t.push(n.indexOf(e));if(0!=t.length)if("carrier"==r)for(const e of t)this.carrier.zones[`zone${e+1}`]="hit";else if("battleship"==r)for(const e of t)this.battleship.zones[`zone${e+1}`]="hit";else if("submarine"==r)for(const e of t)this.submarine.zones[`zone${e+1}`]="hit";else if("cruiser"==r)for(const e of t)this.cruiser.zones[`zone${e+1}`]="hit";else if("destroyer"==r)for(const e of t)this.destroyer.zones[`zone${e+1}`]="hit"}else this.gameboard[e].miss=!0}areAllShipsSunk(){return!!(Object.values(this.carrier.zones).every((e=>"hit"==e))&&Object.values(this.battleship.zones).every((e=>"hit"==e))&&Object.values(this.cruiser.zones).every((e=>"hit"==e))&&Object.values(this.submarine.zones).every((e=>"hit"==e))&&Object.values(this.destroyer.zones).every((e=>"hit"==e)))}}new a},138:(e,t,r)=>{r.a(e,(async(e,t)=>{try{r(654),r(498),r(643);var n=r(507);async function a(){try{let e=await fetch("http://www.randomnumberapi.com/api/v1.0/random?min=0&max=9&count=1");const t=await e.json();return Number(t)}catch(e){console.log(e)}}async function o(){try{let e=await fetch("http://www.randomnumberapi.com/api/v1.0/random?min=6&max=9&count=1");const t=await e.json();return Number(t)}catch(e){console.log(e)}}async function i(){try{let e=await fetch("http://www.randomnumberapi.com/api/v1.0/random?min=94&max=97&count=1");const t=await e.json();return Number(t)}catch(e){console.log(e)}}async function s(){try{let e=await fetch("http://www.randomnumberapi.com/api/v1.0/random?min=91&max=94&count=1");const t=await e.json();return Number(t)}catch(e){console.log(e)}}const c=new n.J("player1"),l=new n.J("CPU");let u=await a();async function p(){try{if(u<5)return{cruiserPosition:await i(),destroyerPosition:10*await o()+1};if(u>=5)return{cruiserPosition:await s(),destroyerPosition:10*await o()+8}}catch(e){console.log(e)}}async function d(){try{l.ownBoard.placeShip("vertical",5,u,"carrier")}catch(e){console.log(e)}}async function h(){try{if(u<5){let e=u+33;l.ownBoard.placeShip("vertical",4,e,"battleship")}else{let e=u+27;l.ownBoard.placeShip("vertical",4,e,"battleship")}}catch(e){console.log(e)}}async function f(){try{if(u<5){let e=u+25;l.ownBoard.placeShip("vertical",3,e,"submarine")}else{let e=u+15;l.ownBoard.placeShip("vertical",3,e,"submarine")}}catch(e){console.log(e)}}async function m(){try{let e=await p();console.log(e.cruiserPosition),l.ownBoard.placeShip("horizontal",3,e.cruiserPosition,"cruiser")}catch(e){console.log(e)}}async function y(){try{let e=await p();console.log(e.destroyerPosition),l.ownBoard.placeShip("horizontal",2,e.destroyerPosition,"destroyer")}catch(e){console.log(e)}}console.log(u);const v=document.querySelector(".player-container"),b=document.querySelector(".cpu-container");let A=0;c.ownBoard.gameboard.forEach((e=>{let t=document.createElement("div");t.classList.add("intact"),t.classList.add("area"),t.classList.add("player"),t.setAttribute("data-id-player",A),v.appendChild(t),A+=1})),A=0,l.ownBoard.gameboard.forEach((e=>{let t=document.createElement("div");t.classList.add("intact"),t.classList.add("area"),t.classList.add("cpu"),t.setAttribute("data-id-cpu",A),b.appendChild(t),A+=1})),document.querySelectorAll(".player"),document.querySelectorAll(".cpu").forEach((e=>{e.addEventListener("click",(()=>{console.log(e.dataset.idCpu),l.ownBoard.receiveAttack(e.dataset.idCpu),console.log(l.ownBoard.gameboard[e.dataset.idCpu]),e.classList.add("hit")}))})),d(),h(),f(),m(),y(),t()}catch(g){t(g)}}),1)},507:(e,t,r)=>{r.d(t,{J:()=>a});var n=r(498);class a{constructor(e){this.name=e,this.ownBoard=new n.V}attackCPU(e,t){t.receiveAttack(e)}attackPlayer(e,t=Math.floor(100*Math.random())){return e.receiveAttack(t),t}}},643:(e,t,r)=>{r.d(t,{lO:()=>n});class n{constructor(e){this.length=e,this.zones=this.createZones()}reset(){this.zones=this.createZones()}createZones(e=this.length){let t={};for(let r=0;r<e;r++)t[`zone${r+1}`]="intact";return t}hit(e){return e>Object.keys(this.zones).length||(this.zones[`zone${e}`]="hit"),this.zones}isSunk(){return!!Object.values(this.zones).every((e=>"hit"==e))}sinkShip(){for(let e=0;e<this.length;e++)this.zones[`zone${e+1}`]="hit"}}new n(4),new n(3),new n(2),new n(1)}},o={};function i(e){var t=o[e];if(void 0!==t)return t.exports;var r=o[e]={id:e,exports:{}};return a[e](r,r.exports,i),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},i.a=(a,o,i)=>{var s;i&&((s=[]).d=1);var c,l,u,p=new Set,d=a.exports,h=new Promise(((e,t)=>{u=t,l=e}));h[t]=d,h[e]=e=>(s&&e(s),p.forEach(e),h.catch((e=>{}))),a.exports=h,o((a=>{var o;c=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var o=[];o.d=0,a.then((e=>{i[t]=e,n(o)}),(e=>{i[r]=e,n(o)}));var i={};return i[e]=e=>e(o),i}}var s={};return s[e]=e=>{},s[t]=a,s})))(a);var i=()=>c.map((e=>{if(e[r])throw e[r];return e[t]})),l=new Promise((t=>{(o=()=>t(i)).r=0;var r=e=>e!==s&&!p.has(e)&&(p.add(e),e&&!e.d&&(o.r++,e.push(o)));c.map((t=>t[e](r)))}));return o.r?l:i()}),(e=>(e?u(h[r]=e):l(d),n(s)))),s&&(s.d=0)},i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.nc=void 0,i(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,