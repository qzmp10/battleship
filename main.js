(()=>{"use strict";var e,t,r,n,a={426:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(537),a=r.n(n),o=r(645),s=r.n(o)()(a());s.push([e.id,"body {\n    display: flex;\n    gap: 6rem;\n}\n\n.player-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap: .5rem;\n    justify-items: center;\n}\n\n.cpu-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap:.5rem;\n    justify-items: center;\n}\n\n.area {\n    width: 3rem;\n    height: 3rem;\n    background-color: green;\n}\n\n.hit {\n    background-color: red;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,UAAU;IACV,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,SAAS;IACT,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["body {\n    display: flex;\n    gap: 6rem;\n}\n\n.player-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap: .5rem;\n    justify-items: center;\n}\n\n.cpu-container {\n    display: grid;\n    grid-template-columns: repeat(10, 3rem);\n    grid-template-rows: repeat(10, 3rem);\n    gap:.5rem;\n    justify-items: center;\n}\n\n.area {\n    width: 3rem;\n    height: 3rem;\n    background-color: green;\n}\n\n.hit {\n    background-color: red;\n}\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),s=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},654:(e,t,r)=>{var n=r(379),a=r.n(n),o=r(795),s=r.n(o),i=r(569),c=r.n(i),l=r(565),u=r.n(l),p=r(216),d=r.n(p),h=r(589),f=r.n(h),m=r(426),v={};v.styleTagTransform=f(),v.setAttributes=u(),v.insert=c().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=d(),a()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},s=[],i=0;i<e.length;i++){var c=e[i],l=n.base?c[0]+n.base:c[0],u=o[l]||0,p="".concat(l," ").concat(u);o[l]=u+1;var d=r(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var f=a(h,n);n.byIndex=i,t.splice(i,0,{identifier:p,updater:f,references:1})}s.push(p)}return s}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=r(o[s]);t[i].references--}for(var c=n(e,a),l=0;l<o.length;l++){var u=r(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},498:(e,t,r)=>{r.d(t,{V:()=>a});var n=r(643);class a{constructor(){this.gameboard=this.createBoard(),this.carrier=new n.lO(5),this.battleship=new n.lO(4),this.cruiser=new n.lO(3),this.submarine=new n.lO(3),this.destroyer=new n.lO(2)}createBoard(){let e=[];for(let t=0;t<100;t++)e.push({ship:!1,state:"intact",position:t});return e}placeShip(e,t,r,n){let a=r;if(!(t<2||t>5)){if("horizontal"==e){if(r>=10)for(;10<a;)a%10==0||(a%=10);if(t>10-a)return;for(let e=0;e<t;e++)0==e?(this.gameboard[r].ship=!0,this.gameboard[r].type=n):(this.gameboard[r+e].ship=!0,this.gameboard[r+e].type=n)}if("vertical"==e){if(10*t>=100-r)return;for(let e=0;e<t;e++)this.gameboard[r+10*e].ship=!0,this.gameboard[r+10*e].type=n}}}receiveAttack(e){let t=[];if(this.gameboard[e].state="hit",1==this.gameboard[e].ship){let r=this.gameboard[e].type,n=this.gameboard.filter((e=>e.type==`${r}`));for(const e of n)"hit"==e.state&&t.push(n.indexOf(e));if(0!=t.length)if("carrier"==r)for(const e of t)this.carrier.zones[`zone${e+1}`]="hit";else if("battleship"==r)for(const e of t)this.battleship.zones[`zone${e+1}`]="hit";else if("submarine"==r)for(const e of t)this.submarine.zones[`zone${e+1}`]="hit";else if("cruiser"==r)for(const e of t)this.cruiser.zones[`zone${e+1}`]="hit";else if("destroyer"==r)for(const e of t)this.destroyer.zones[`zone${e+1}`]="hit"}else this.gameboard[e].miss=!0}areAllShipsSunk(){return!!(Object.values(this.carrier.zones).every((e=>"hit"==e))&&Object.values(this.battleship.zones).every((e=>"hit"==e))&&Object.values(this.cruiser.zones).every((e=>"hit"==e))&&Object.values(this.submarine.zones).every((e=>"hit"==e))&&Object.values(this.destroyer.zones).every((e=>"hit"==e)))}}new a},138:(e,t,r)=>{r.a(e,(async(e,t)=>{try{r(654),r(498),r(643);var n=r(507);async function a(){try{let e=await fetch("http://www.randomnumberapi.com/api/v1.0/random?min=0&max=9&count=1");const t=await e.json();return console.log(t),Number(t)}catch(e){console.log(e)}}const o=new n.J("player1"),s=new n.J("CPU");let i=await a();async function c(){try{s.ownBoard.placeShip("vertical",5,i,"carrier")}catch(e){console.log(e)}}async function l(){try{if(i<5){let e=i+33;s.ownBoard.placeShip("vertical",4,e,"battleship")}else{let e=i+27;s.ownBoard.placeShip("vertical",4,e,"battleship")}}catch(e){console.log(e)}}async function u(){try{if(i<5){let e=i+25;s.ownBoard.placeShip("vertical",3,e,"submarine")}else{let e=i+15;s.ownBoard.placeShip("vertical",3,e,"submarine")}}catch(e){console.log(e)}}c(),l(),u();const p=document.querySelector(".player-container"),d=document.querySelector(".cpu-container");let h=0;o.ownBoard.gameboard.forEach((e=>{let t=document.createElement("div");t.classList.add("intact"),t.classList.add("area"),t.classList.add("player"),t.setAttribute("data-id-player",h),p.appendChild(t),h+=1})),h=0,s.ownBoard.gameboard.forEach((e=>{let t=document.createElement("div");t.classList.add("intact"),t.classList.add("area"),t.classList.add("cpu"),t.setAttribute("data-id-cpu",h),d.appendChild(t),h+=1})),document.querySelectorAll(".player"),document.querySelectorAll(".cpu").forEach((e=>{e.addEventListener("click",(()=>{console.log(e.dataset.idCpu),s.ownBoard.receiveAttack(e.dataset.idCpu),console.log(s.ownBoard.gameboard[e.dataset.idCpu]),e.classList.add("hit")}))})),t()}catch(f){t(f)}}),1)},507:(e,t,r)=>{r.d(t,{J:()=>a});var n=r(498);class a{constructor(e){this.name=e,this.ownBoard=new n.V}attackCPU(e,t){t.receiveAttack(e)}attackPlayer(e,t=Math.floor(100*Math.random())){return e.receiveAttack(t),t}}},643:(e,t,r)=>{r.d(t,{lO:()=>n});class n{constructor(e){this.length=e,this.zones=this.createZones()}reset(){this.zones=this.createZones()}createZones(e=this.length){let t={};for(let r=0;r<e;r++)t[`zone${r+1}`]="intact";return t}hit(e){return e>Object.keys(this.zones).length||(this.zones[`zone${e}`]="hit"),this.zones}isSunk(){return!!Object.values(this.zones).every((e=>"hit"==e))}sinkShip(){for(let e=0;e<this.length;e++)this.zones[`zone${e+1}`]="hit"}}new n(4),new n(3),new n(2),new n(1)}},o={};function s(e){var t=o[e];if(void 0!==t)return t.exports;var r=o[e]={id:e,exports:{}};return a[e](r,r.exports,s),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},s.a=(a,o,s)=>{var i;s&&((i=[]).d=1);var c,l,u,p=new Set,d=a.exports,h=new Promise(((e,t)=>{u=t,l=e}));h[t]=d,h[e]=e=>(i&&e(i),p.forEach(e),h.catch((e=>{}))),a.exports=h,o((a=>{var o;c=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var o=[];o.d=0,a.then((e=>{s[t]=e,n(o)}),(e=>{s[r]=e,n(o)}));var s={};return s[e]=e=>e(o),s}}var i={};return i[e]=e=>{},i[t]=a,i})))(a);var s=()=>c.map((e=>{if(e[r])throw e[r];return e[t]})),l=new Promise((t=>{(o=()=>t(s)).r=0;var r=e=>e!==i&&!p.has(e)&&(p.add(e),e&&!e.d&&(o.r++,e.push(o)));c.map((t=>t[e](r)))}));return o.r?l:s()}),(e=>(e?u(h[r]=e):l(d),n(i)))),i&&(i.d=0)},s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.nc=void 0,s(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0MySixFQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvYXN5bmMgbW9kdWxlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgd2VicGFja1F1ZXVlcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgcXVldWVzXCIpIDogXCJfX3dlYnBhY2tfcXVldWVzX19cIjtcbnZhciB3ZWJwYWNrRXhwb3J0cyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgZXhwb3J0c1wiKSA6IFwiX193ZWJwYWNrX2V4cG9ydHNfX1wiO1xudmFyIHdlYnBhY2tFcnJvciA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgZXJyb3JcIikgOiBcIl9fd2VicGFja19lcnJvcl9fXCI7XG52YXIgcmVzb2x2ZVF1ZXVlID0gKHF1ZXVlKSA9PiB7XG5cdGlmKHF1ZXVlICYmICFxdWV1ZS5kKSB7XG5cdFx0cXVldWUuZCA9IDE7XG5cdFx0cXVldWUuZm9yRWFjaCgoZm4pID0+IChmbi5yLS0pKTtcblx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSA/IGZuLnIrKyA6IGZuKCkpKTtcblx0fVxufVxudmFyIHdyYXBEZXBzID0gKGRlcHMpID0+IChkZXBzLm1hcCgoZGVwKSA9PiB7XG5cdGlmKGRlcCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKSB7XG5cdFx0aWYoZGVwW3dlYnBhY2tRdWV1ZXNdKSByZXR1cm4gZGVwO1xuXHRcdGlmKGRlcC50aGVuKSB7XG5cdFx0XHR2YXIgcXVldWUgPSBbXTtcblx0XHRcdHF1ZXVlLmQgPSAwO1xuXHRcdFx0ZGVwLnRoZW4oKHIpID0+IHtcblx0XHRcdFx0b2JqW3dlYnBhY2tFeHBvcnRzXSA9IHI7XG5cdFx0XHRcdHJlc29sdmVRdWV1ZShxdWV1ZSk7XG5cdFx0XHR9LCAoZSkgPT4ge1xuXHRcdFx0XHRvYmpbd2VicGFja0Vycm9yXSA9IGU7XG5cdFx0XHRcdHJlc29sdmVRdWV1ZShxdWV1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdHZhciBvYmogPSB7fTtcblx0XHRcdG9ialt3ZWJwYWNrUXVldWVzXSA9IChmbikgPT4gKGZuKHF1ZXVlKSk7XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblx0fVxuXHR2YXIgcmV0ID0ge307XG5cdHJldFt3ZWJwYWNrUXVldWVzXSA9IHggPT4ge307XG5cdHJldFt3ZWJwYWNrRXhwb3J0c10gPSBkZXA7XG5cdHJldHVybiByZXQ7XG59KSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmEgPSAobW9kdWxlLCBib2R5LCBoYXNBd2FpdCkgPT4ge1xuXHR2YXIgcXVldWU7XG5cdGhhc0F3YWl0ICYmICgocXVldWUgPSBbXSkuZCA9IDEpO1xuXHR2YXIgZGVwUXVldWVzID0gbmV3IFNldCgpO1xuXHR2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuXHR2YXIgY3VycmVudERlcHM7XG5cdHZhciBvdXRlclJlc29sdmU7XG5cdHZhciByZWplY3Q7XG5cdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuXHRcdHJlamVjdCA9IHJlajtcblx0XHRvdXRlclJlc29sdmUgPSByZXNvbHZlO1xuXHR9KTtcblx0cHJvbWlzZVt3ZWJwYWNrRXhwb3J0c10gPSBleHBvcnRzO1xuXHRwcm9taXNlW3dlYnBhY2tRdWV1ZXNdID0gKGZuKSA9PiAocXVldWUgJiYgZm4ocXVldWUpLCBkZXBRdWV1ZXMuZm9yRWFjaChmbiksIHByb21pc2VbXCJjYXRjaFwiXSh4ID0+IHt9KSk7XG5cdG1vZHVsZS5leHBvcnRzID0gcHJvbWlzZTtcblx0Ym9keSgoZGVwcykgPT4ge1xuXHRcdGN1cnJlbnREZXBzID0gd3JhcERlcHMoZGVwcyk7XG5cdFx0dmFyIGZuO1xuXHRcdHZhciBnZXRSZXN1bHQgPSAoKSA9PiAoY3VycmVudERlcHMubWFwKChkKSA9PiB7XG5cdFx0XHRpZihkW3dlYnBhY2tFcnJvcl0pIHRocm93IGRbd2VicGFja0Vycm9yXTtcblx0XHRcdHJldHVybiBkW3dlYnBhY2tFeHBvcnRzXTtcblx0XHR9KSlcblx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRmbiA9ICgpID0+IChyZXNvbHZlKGdldFJlc3VsdCkpO1xuXHRcdFx0Zm4uciA9IDA7XG5cdFx0XHR2YXIgZm5RdWV1ZSA9IChxKSA9PiAocSAhPT0gcXVldWUgJiYgIWRlcFF1ZXVlcy5oYXMocSkgJiYgKGRlcFF1ZXVlcy5hZGQocSksIHEgJiYgIXEuZCAmJiAoZm4ucisrLCBxLnB1c2goZm4pKSkpO1xuXHRcdFx0Y3VycmVudERlcHMubWFwKChkZXApID0+IChkZXBbd2VicGFja1F1ZXVlc10oZm5RdWV1ZSkpKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZm4uciA/IHByb21pc2UgOiBnZXRSZXN1bHQoKTtcblx0fSwgKGVycikgPT4gKChlcnIgPyByZWplY3QocHJvbWlzZVt3ZWJwYWNrRXJyb3JdID0gZXJyKSA6IG91dGVyUmVzb2x2ZShleHBvcnRzKSksIHJlc29sdmVRdWV1ZShxdWV1ZSkpKTtcblx0cXVldWUgJiYgKHF1ZXVlLmQgPSAwKTtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiA2cmVtO1xcbn1cXG5cXG4ucGxheWVyLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAzcmVtKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDNyZW0pO1xcbiAgICBnYXA6IC41cmVtO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5jcHUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDNyZW0pO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgM3JlbSk7XFxuICAgIGdhcDouNXJlbTtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uYXJlYSB7XFxuICAgIHdpZHRoOiAzcmVtO1xcbiAgICBoZWlnaHQ6IDNyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbn1cXG5cXG4uaGl0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1Q0FBdUM7SUFDdkMsb0NBQW9DO0lBQ3BDLFVBQVU7SUFDVixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsdUNBQXVDO0lBQ3ZDLG9DQUFvQztJQUNwQyxTQUFTO0lBQ1QscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdhcDogNnJlbTtcXG59XFxuXFxuLnBsYXllci1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgM3JlbSk7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAzcmVtKTtcXG4gICAgZ2FwOiAuNXJlbTtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uY3B1LWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAzcmVtKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDNyZW0pO1xcbiAgICBnYXA6LjVyZW07XFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmFyZWEge1xcbiAgICB3aWR0aDogM3JlbTtcXG4gICAgaGVpZ2h0OiAzcmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXG59XFxuXFxuLmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vc2hpcFwiXG5cbmV4cG9ydCBjbGFzcyBHYW1lYm9hcmQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkID0gdGhpcy5jcmVhdGVCb2FyZCgpO1xuICAgICAgICB0aGlzLmNhcnJpZXIgPSBuZXcgU2hpcCg1KTtcbiAgICAgICAgdGhpcy5iYXR0bGVzaGlwID0gbmV3IFNoaXAoNCk7XG4gICAgICAgIHRoaXMuY3J1aXNlciA9IG5ldyBTaGlwKDMpO1xuICAgICAgICB0aGlzLnN1Ym1hcmluZSA9IG5ldyBTaGlwKDMpO1xuICAgICAgICB0aGlzLmRlc3Ryb3llciA9IG5ldyBTaGlwKDIpO1xuICAgIH1cblxuICAgIGNyZWF0ZUJvYXJkKCkge1xuICAgICAgICBsZXQgZ2FtZWJvYXJkID0gW107XG4gICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICAgICAgICBnYW1lYm9hcmQucHVzaCh7c2hpcDogZmFsc2UsIHN0YXRlOiBcImludGFjdFwiLCBwb3NpdGlvbjogaX0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhbWVib2FyZDtcbiAgICB9XG5cbiAgICBwbGFjZVNoaXAoZGlyZWN0aW9uLCBsZW5ndGgsIHN0YXJ0aW5nUG9zaXRpb24sIHR5cGUpIHtcbiAgICAgICAgXG4gICAgICAgIGxldCB0ZW1wUG9zaXRpb24gPSBzdGFydGluZ1Bvc2l0aW9uO1xuXG4gICAgICAgIGlmKGxlbmd0aCA8IDIgfHwgbGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcblxuICAgICAgICAgICAgLy9tYXRoIHRvIG5vdCBleGNlZWQgZ2FtZWJvYXJkXG5cbiAgICAgICAgICAgIGlmKHN0YXJ0aW5nUG9zaXRpb24gPj0gMTApIHtcbiAgICAgICAgICAgICAgICB3aGlsZSgxMCA8IHRlbXBQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZih0ZW1wUG9zaXRpb24gJSAxMCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUG9zaXRpb24gLyAxMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBQb3NpdGlvbiAlPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAvL2RvbnQgZXhjZWVkIGdhbWVib2FyZFxuICAgICAgICAgICAgaWYobGVuZ3RoID4gMTAgLSB0ZW1wUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmKGkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVib2FyZFtzdGFydGluZ1Bvc2l0aW9uXS5zaGlwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lYm9hcmRbc3RhcnRpbmdQb3NpdGlvbl0udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lYm9hcmRbc3RhcnRpbmdQb3NpdGlvbiArIGldLnNoaXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVib2FyZFtzdGFydGluZ1Bvc2l0aW9uICsgaV0udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihkaXJlY3Rpb24gPT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgICAgICBpZihsZW5ndGggKiAxMCA+PSAoMTAwIC0gc3RhcnRpbmdQb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZWJvYXJkW3N0YXJ0aW5nUG9zaXRpb24gKyAoMTAgKiBpKV0uc2hpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lYm9hcmRbc3RhcnRpbmdQb3NpdGlvbiArICgxMCAqIGkpXS50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmVjZWl2ZUF0dGFjayhwb3NpdGlvbikge1xuXG4gICAgICAgIGxldCBoaXRJbmRleEFycmF5ID0gW107XG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkW3Bvc2l0aW9uXS5zdGF0ZSA9ICdoaXQnO1xuXG5cbiAgICAgICAgaWYodGhpcy5nYW1lYm9hcmRbcG9zaXRpb25dLnNoaXAgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgc2hpcFR5cGUgPSB0aGlzLmdhbWVib2FyZFtwb3NpdGlvbl0udHlwZTtcbiAgICAgICAgICAgIGxldCBzaGlwQXJyYXkgPSB0aGlzLmdhbWVib2FyZC5maWx0ZXIodmFsdWUgPT4gdmFsdWUudHlwZSA9PSBgJHtzaGlwVHlwZX1gKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hpcEFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYoa2V5LnN0YXRlID09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpdEluZGV4QXJyYXkucHVzaChzaGlwQXJyYXkuaW5kZXhPZihrZXkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGhpdEluZGV4QXJyYXkubGVuZ3RoICE9IDApIHtcblxuICAgICAgICAgICAgICAgIGlmKHNoaXBUeXBlID09ICdjYXJyaWVyJykge1xuXG4gICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBrZXkgb2YgaGl0SW5kZXhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY2Fycmllci56b25lc1tgem9uZSR7a2V5ICsgMX1gXSkgPSAnaGl0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hpcFR5cGUgPT0gJ2JhdHRsZXNoaXAnKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBrZXkgb2YgaGl0SW5kZXhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmF0dGxlc2hpcC56b25lc1tgem9uZSR7a2V5ICsgMX1gXSkgPSAnaGl0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hpcFR5cGUgPT0gJ3N1Ym1hcmluZScpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yKGNvbnN0IGtleSBvZiBoaXRJbmRleEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zdWJtYXJpbmUuem9uZXNbYHpvbmUke2tleSArIDF9YF0pID0gJ2hpdCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNoaXBUeXBlID09ICdjcnVpc2VyJykge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IoY29uc3Qga2V5IG9mIGhpdEluZGV4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNydWlzZXIuem9uZXNbYHpvbmUke2tleSArIDF9YF0pID0gJ2hpdCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNoaXBUeXBlID09ICdkZXN0cm95ZXInKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBrZXkgb2YgaGl0SW5kZXhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVzdHJveWVyLnpvbmVzW2B6b25lJHtrZXkgKyAxfWBdKSA9ICdoaXQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVib2FyZFtwb3NpdGlvbl0ubWlzcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGFyZUFsbFNoaXBzU3VuaygpIHtcblxuICAgICAgICBpZihPYmplY3QudmFsdWVzKHRoaXMuY2Fycmllci56b25lcykuZXZlcnkodmFsdWUgPT4gdmFsdWUgPT0gJ2hpdCcpICYmXG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5iYXR0bGVzaGlwLnpvbmVzKS5ldmVyeSh2YWx1ZSA9PiB2YWx1ZSA9PSAnaGl0JykgJiZcbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmNydWlzZXIuem9uZXMpLmV2ZXJ5KHZhbHVlID0+IHZhbHVlID09ICdoaXQnKSAmJlxuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuc3VibWFyaW5lLnpvbmVzKS5ldmVyeSh2YWx1ZSA9PiB2YWx1ZSA9PSAnaGl0JykgJiZcbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmRlc3Ryb3llci56b25lcykuZXZlcnkodmFsdWUgPT4gdmFsdWUgPT0gJ2hpdCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGJvYXJkID0gbmV3IEdhbWVib2FyZCgpOyIsImltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5pbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCB7IFNoaXAgfSBmcm9tIFwiLi9zaGlwXCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0TnVtYmVyKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBudW1iZXIgPSBhd2FpdCBmZXRjaChcImh0dHA6Ly93d3cucmFuZG9tbnVtYmVyYXBpLmNvbS9hcGkvdjEuMC9yYW5kb20/bWluPTAmbWF4PTkmY291bnQ9MVwiKTtcbiAgICAgICAgY29uc3QgcmFuZG9tTnVtYmVyID0gYXdhaXQgbnVtYmVyLmpzb24oKTtcbiAgICAgICAgY29uc29sZS5sb2cocmFuZG9tTnVtYmVyKVxuICAgICAgICByZXR1cm4gTnVtYmVyKHJhbmRvbU51bWJlcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbn1cblxuY29uc3QgcGxheWVyT25lID0gbmV3IFBsYXllcigncGxheWVyMScpO1xuY29uc3QgQ1BVID0gbmV3IFBsYXllcignQ1BVJyk7XG5cbmxldCBzdGFydGluZ1Bvc2l0aW9uID0gYXdhaXQgZ2V0TnVtYmVyKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIHBsYWNlQ2FycmllcigpIHtcbiAgICB0cnkge1xuICAgICAgICBDUFUub3duQm9hcmQucGxhY2VTaGlwKCd2ZXJ0aWNhbCcsIDUsIHN0YXJ0aW5nUG9zaXRpb24sICdjYXJyaWVyJyk7XG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwbGFjZUJhdHRsZXNoaXAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYoc3RhcnRpbmdQb3NpdGlvbiA8IDUpIHtcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHN0YXJ0aW5nUG9zaXRpb24gKyAzMztcbiAgICAgICAgICAgIENQVS5vd25Cb2FyZC5wbGFjZVNoaXAoJ3ZlcnRpY2FsJywgNCwgcG9zaXRpb24sICdiYXR0bGVzaGlwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBzdGFydGluZ1Bvc2l0aW9uICsgMjc7XG4gICAgICAgICAgICBDUFUub3duQm9hcmQucGxhY2VTaGlwKCd2ZXJ0aWNhbCcsIDQsIHBvc2l0aW9uLCAnYmF0dGxlc2hpcCcpO1xuICAgICAgICB9XG5cbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBsYWNlU3VibWFyaW5lKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmKHN0YXJ0aW5nUG9zaXRpb24gPCA1KSB7XG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBzdGFydGluZ1Bvc2l0aW9uICsgMjU7XG4gICAgICAgICAgICBDUFUub3duQm9hcmQucGxhY2VTaGlwKCd2ZXJ0aWNhbCcsIDMsIHBvc2l0aW9uLCAnc3VibWFyaW5lJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBzdGFydGluZ1Bvc2l0aW9uICsgMTU7XG4gICAgICAgICAgICBDUFUub3duQm9hcmQucGxhY2VTaGlwKCd2ZXJ0aWNhbCcsIDMsIHBvc2l0aW9uLCAnc3VibWFyaW5lJyk7XG4gICAgICAgIH1cblxuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbn1cblxucGxhY2VDYXJyaWVyKCk7XG5wbGFjZUJhdHRsZXNoaXAoKTtcbnBsYWNlU3VibWFyaW5lKCk7XG5cbmNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllci1jb250YWluZXInKTtcbmNvbnN0IGNwdUJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNwdS1jb250YWluZXInKTtcblxubGV0IGNvdW50ZXIgPSAwO1xuXG5wbGF5ZXJPbmUub3duQm9hcmQuZ2FtZWJvYXJkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdpbnRhY3QnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnYXJlYScpXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3BsYXllcicpO1xuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQtcGxheWVyJywgY291bnRlcilcbiAgICBwbGF5ZXJCb2FyZC5hcHBlbmRDaGlsZChkaXYpO1xuICAgIGNvdW50ZXIgKz0gMTtcbn0pO1xuXG5jb3VudGVyID0gMDtcblxuQ1BVLm93bkJvYXJkLmdhbWVib2FyZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnaW50YWN0Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2FyZWEnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnY3B1Jyk7XG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1pZC1jcHUnLCBjb3VudGVyKVxuICAgIGNwdUJvYXJkLmFwcGVuZENoaWxkKGRpdik7XG4gICAgY291bnRlciArPSAxO1xufSk7XG5cbmxldCBwbGF5ZXJBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllcicpO1xubGV0IGNwdUFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY3B1Jyk7XG5cbmNwdUFyZWEuZm9yRWFjaChhcmVhID0+IHtcbiAgICBhcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhhcmVhLmRhdGFzZXQuaWRDcHUpXG4gICAgICAgIENQVS5vd25Cb2FyZC5yZWNlaXZlQXR0YWNrKGFyZWEuZGF0YXNldC5pZENwdSlcbiAgICAgICAgY29uc29sZS5sb2coQ1BVLm93bkJvYXJkLmdhbWVib2FyZFthcmVhLmRhdGFzZXQuaWRDcHVdKTtcbiAgICAgICAgYXJlYS5jbGFzc0xpc3QuYWRkKCdoaXQnKVxuICAgIH0pXG59KVxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsImltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xuXG5leHBvcnQgY2xhc3MgUGxheWVye1xuXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm93bkJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuICAgIH1cblxuICAgIGF0dGFja0NQVShwb3NpdGlvbiwgZW5lbXlCb2FyZCkge1xuICAgICAgICAgICAgZW5lbXlCb2FyZC5yZWNlaXZlQXR0YWNrKHBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBhdHRhY2tQbGF5ZXIoZW5lbXlCb2FyZCwgcG9zaXRpb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApKSB7XG4gICAgICAgIGVuZW15Qm9hcmQucmVjZWl2ZUF0dGFjayhwb3NpdGlvbik7XG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFNoaXAge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy56b25lcyA9IHRoaXMuY3JlYXRlWm9uZXMoKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy56b25lcyA9IHRoaXMuY3JlYXRlWm9uZXMoKTtcbiAgICB9XG4gICAgXG4gICAgY3JlYXRlWm9uZXMoem9uZXMgPSB0aGlzLmxlbmd0aCkge1xuICAgICAgICBsZXQgem9uZXNPYmplY3QgPSB7fTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHpvbmVzOyBpKyspIHtcbiAgICAgICAgICAgIHpvbmVzT2JqZWN0W2B6b25lJHtpICsgMX1gXSA9IFwiaW50YWN0XCI7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gem9uZXNPYmplY3Q7XG4gICAgfVxuXG4gICAgaGl0KG51bWJlcikge1xuXG4gICAgICAgIGlmKG51bWJlciA+IE9iamVjdC5rZXlzKHRoaXMuem9uZXMpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuem9uZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnpvbmVzW2B6b25lJHtudW1iZXJ9YF0gPSBcImhpdFwiO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuem9uZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1N1bmsoKSB7XG4gICAgICAgIGlmKE9iamVjdC52YWx1ZXModGhpcy56b25lcykuZXZlcnkodmFsdWUgPT4gdmFsdWUgPT0gXCJoaXRcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2lua1NoaXAoKSB7XG5cbiAgICAgICAgZm9yKGxldCBpID0wOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy56b25lc1tgem9uZSR7aSArIDF9YF0gPSAnaGl0JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBmb3VyU2hpcCA9IG5ldyBTaGlwKDQpO1xuZXhwb3J0IGNvbnN0IHRocmVlU2hpcCA9IG5ldyBTaGlwKDMpO1xuZXhwb3J0IGNvbnN0IHR3b1NoaXAgPSBuZXcgU2hpcCgyKTtcbmV4cG9ydCBjb25zdCBvbmVTaGlwID0gbmV3IFNoaXAoMSk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdtb2R1bGUnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzgpO1xuIl0sIm5hbWVzIjpbIndlYnBhY2tRdWV1ZXMiLCJ3ZWJwYWNrRXhwb3J0cyIsIndlYnBhY2tFcnJvciIsInJlc29sdmVRdWV1ZSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiR2FtZWJvYXJkIiwiY29uc3RydWN0b3IiLCJnYW1lYm9hcmQiLCJjcmVhdGVCb2FyZCIsImNhcnJpZXIiLCJiYXR0bGVzaGlwIiwiY3J1aXNlciIsInN1Ym1hcmluZSIsImRlc3Ryb3llciIsInNoaXAiLCJzdGF0ZSIsInBvc2l0aW9uIiwicGxhY2VTaGlwIiwiZGlyZWN0aW9uIiwic3RhcnRpbmdQb3NpdGlvbiIsInR5cGUiLCJ0ZW1wUG9zaXRpb24iLCJyZWNlaXZlQXR0YWNrIiwiaGl0SW5kZXhBcnJheSIsInNoaXBUeXBlIiwic2hpcEFycmF5IiwiZmlsdGVyIiwidmFsdWUiLCJrZXkiLCJpbmRleE9mIiwiem9uZXMiLCJtaXNzIiwiYXJlQWxsU2hpcHNTdW5rIiwiT2JqZWN0IiwidmFsdWVzIiwiZXZlcnkiLCJhc3luYyIsImdldE51bWJlciIsIm51bWJlciIsImZldGNoIiwicmFuZG9tTnVtYmVyIiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJOdW1iZXIiLCJlcnJvciIsInBsYXllck9uZSIsIkNQVSIsInBsYWNlQ2FycmllciIsIm93bkJvYXJkIiwicGxhY2VCYXR0bGVzaGlwIiwicGxhY2VTdWJtYXJpbmUiLCJwbGF5ZXJCb2FyZCIsImNwdUJvYXJkIiwiY291bnRlciIsImZvckVhY2giLCJkaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXJlYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkYXRhc2V0IiwiaWRDcHUiLCJQbGF5ZXIiLCJuYW1lIiwiYXR0YWNrQ1BVIiwiZW5lbXlCb2FyZCIsImF0dGFja1BsYXllciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIlNoaXAiLCJjcmVhdGVab25lcyIsInJlc2V0Iiwiem9uZXNPYmplY3QiLCJoaXQiLCJrZXlzIiwiaXNTdW5rIiwic2lua1NoaXAiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiU3ltYm9sIiwicXVldWUiLCJkIiwiZm4iLCJyIiwiYSIsImJvZHkiLCJoYXNBd2FpdCIsImN1cnJlbnREZXBzIiwib3V0ZXJSZXNvbHZlIiwicmVqZWN0IiwiZGVwUXVldWVzIiwiU2V0IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqIiwieCIsImRlcHMiLCJkZXAiLCJ0aGVuIiwicmV0Iiwid3JhcERlcHMiLCJnZXRSZXN1bHQiLCJmblF1ZXVlIiwicSIsImhhcyIsImVyciIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiXSwic291cmNlUm9vdCI6IiJ9